# --------------------------------------------------------------------------------
# This workflow was automatically generated by Action Status 1.0 (213).
# (see https://actionstatus.elegantchaos.com for more details)
# --------------------------------------------------------------------------------

name: Tests

on: [push, pull_request]

jobs:

    macOS-swift-50:
        name: macOS (Swift 5.0)
        runs-on: macOS-latest
        steps:
        - name: Checkout
          uses: actions/checkout@v1
        - name: Swift Version
          run: swift --version
        - name: Make Logs Directory
          run: mkdir logs
        - name: Build (Release)
          run: swift build -c release
        - name: Test (Release)
          run: swift test --configuration release -Xswiftc -enable-testing 


    macOS-swift-51:
        name: macOS (Swift 5.1)
        runs-on: macOS-latest
        steps:
        - name: Checkout
          uses: actions/checkout@v1
        - name: Swift Version
          run: swift --version
        - name: Make Logs Directory
          run: mkdir logs
        - name: Build (Release)
          run: swift build -c release
        - name: Test (Release)
          run: swift test --configuration release -Xswiftc -enable-testing 


    xcode-swift-50:
        name: Xcode (Swift 5.0)
        runs-on: macOS-latest
        steps:
        - name: Checkout
          uses: actions/checkout@v1
        - name: Swift Version
          run: swift --version
        - name: Make Logs Directory
          run: mkdir logs
        - name: Xcode Version
          run: xcodebuild -version
        - name: XC Pretty
          run: sudo gem install xcpretty-travis-formatter
        - name: Detect Workspace & Scheme (iOS)
          run: |
            WORKSPACE="Localization.xcworkspace"
            if [[ ! -e "$WORKSPACE" ]]
            then
            WORKSPACE="."
            GOTPACKAGE=$(xcodebuild -workspace . -list | (grep Localization-Package || true))
            if [[ $GOTPACKAGE != "" ]]
            then
            SCHEME="Localization-Package"
            else
            SCHEME="Localization"
            fi
            else
            SCHEME="Localization-iOS"
            fi
            echo "set -o pipefail; export PATH='swift-latest:$PATH'; WORKSPACE='$WORKSPACE'; SCHEME='$SCHEME'" > setup.sh
        - name: Build (iOS Release)
          run: |
            source "setup.sh"
            echo "Building workspace $WORKSPACE scheme $SCHEME."
            xcodebuild clean build -workspace "$WORKSPACE" -scheme "$SCHEME" -configuration Release CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO | tee logs/xcodebuild-iOS-build-release.log | xcpretty
        - name: Test (iOS Release)
          run: |
            source "setup.sh"
            echo "Testing workspace $WORKSPACE scheme $SCHEME."
            xcodebuild test -workspace "$WORKSPACE" -scheme "$SCHEME" -destination "name=iPhone 11" -configuration Release CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO ENABLE_TESTABILITY=YES | tee logs/xcodebuild-iOS-test-release.log | xcpretty


    xcode-swift-51:
        name: Xcode (Swift 5.1)
        runs-on: macOS-latest
        steps:
        - name: Checkout
          uses: actions/checkout@v1
        - name: Swift Version
          run: swift --version
        - name: Make Logs Directory
          run: mkdir logs
        - name: Xcode Version
          run: xcodebuild -version
        - name: XC Pretty
          run: sudo gem install xcpretty-travis-formatter
        - name: Detect Workspace & Scheme (iOS)
          run: |
            WORKSPACE="Localization.xcworkspace"
            if [[ ! -e "$WORKSPACE" ]]
            then
            WORKSPACE="."
            GOTPACKAGE=$(xcodebuild -workspace . -list | (grep Localization-Package || true))
            if [[ $GOTPACKAGE != "" ]]
            then
            SCHEME="Localization-Package"
            else
            SCHEME="Localization"
            fi
            else
            SCHEME="Localization-iOS"
            fi
            echo "set -o pipefail; export PATH='swift-latest:$PATH'; WORKSPACE='$WORKSPACE'; SCHEME='$SCHEME'" > setup.sh
        - name: Build (iOS Release)
          run: |
            source "setup.sh"
            echo "Building workspace $WORKSPACE scheme $SCHEME."
            xcodebuild clean build -workspace "$WORKSPACE" -scheme "$SCHEME" -configuration Release CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO | tee logs/xcodebuild-iOS-build-release.log | xcpretty
        - name: Test (iOS Release)
          run: |
            source "setup.sh"
            echo "Testing workspace $WORKSPACE scheme $SCHEME."
            xcodebuild test -workspace "$WORKSPACE" -scheme "$SCHEME" -destination "name=iPhone 11" -configuration Release CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO ENABLE_TESTABILITY=YES | tee logs/xcodebuild-iOS-test-release.log | xcpretty

